// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PA_Backend.Data;

namespace PA_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210526140632_addClinicMaster")]
    partial class addClinicMaster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a1e65ec9-0a1c-402f-a8a8-049dca32fc0a",
                            ConcurrencyStamp = "baa7a87c-d3ce-491c-88ca-92ad78c33409",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "db374a64-86a2-4a17-8974-ec6da29948ed",
                            ConcurrencyStamp = "481156d2-f068-4791-8f70-621566b69c89",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PA_Backend.Models.CPTCode", b =>
                {
                    b.Property<int>("CPTCodeId")
                        .HasColumnType("int");

                    b.Property<string>("CPTDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPTCodeId");

                    b.ToTable("CPTCodes");

                    b.HasData(
                        new
                        {
                            CPTCodeId = 92507,
                            CPTDescription = "Treatment of speech, language, voice, communication, and/or auditory processing disorder."
                        },
                        new
                        {
                            CPTCodeId = 97129,
                            CPTDescription = "Therapeutic interventions that focus on cognitive function (e.g., attention, memory, reasoning, executive function, problem-solving and/or pragmatic functioning) and compensatory strategies to manage the performance of an activity (e.g., managing time or schedules, initiating, organizing and sequencing tasks), direct (one-on-one) patient contact; initial 15 minutes"
                        },
                        new
                        {
                            CPTCodeId = 97130,
                            CPTDescription = "Each additional 15 minutes. Code 97130 is an add-on code. It will need to be billed in addition to 97129 whenever more than one 15-minute unit is performed. Code 97129 will only ever be billed once per visit. Code 91730 will never be billed alone."
                        },
                        new
                        {
                            CPTCodeId = 97110,
                            CPTDescription = "Therapeutic exercises to develop strength, endurance, range of motion and flexibility."
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClinicAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ClinicIsAGroup")
                        .HasColumnType("bit");

                    b.Property<long>("ClinicNPI")
                        .HasColumnType("bigint");

                    b.Property<string>("ClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            ClinicId = 1,
                            ClinicAddress1 = "123 Any Street",
                            ClinicAddress2 = "",
                            ClinicCity = "Mt Pleasant",
                            ClinicIsAGroup = true,
                            ClinicNPI = 1144664293L,
                            ClinicName = "The Playroom, Inc",
                            ClinicPhone = "(262) 555-1212",
                            ClinicState = "WI",
                            ClinicZip = "53406"
                        },
                        new
                        {
                            ClinicId = 2,
                            ClinicAddress1 = "123 Any Street",
                            ClinicAddress2 = "",
                            ClinicCity = "Mt Pleasant",
                            ClinicIsAGroup = false,
                            ClinicNPI = 1891048211L,
                            ClinicName = "Xaris, Inc",
                            ClinicPhone = "(262) 555-1212",
                            ClinicState = "WI",
                            ClinicZip = "53406"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.DiagnosisCode", b =>
                {
                    b.Property<string>("DiagCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagCode");

                    b.ToTable("DiagnosisCodes");
                });

            modelBuilder.Entity("PA_Backend.Models.PlaceOfService", b =>
                {
                    b.Property<string>("PlaceOfServiceCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceOfServiceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceOfServiceCode");

                    b.ToTable("PlacesOfServices");

                    b.HasData(
                        new
                        {
                            PlaceOfServiceCode = "02",
                            PlaceOfServiceDesc = "Telehealth"
                        },
                        new
                        {
                            PlaceOfServiceCode = "03",
                            PlaceOfServiceDesc = "School"
                        },
                        new
                        {
                            PlaceOfServiceCode = "11",
                            PlaceOfServiceDesc = "Office"
                        },
                        new
                        {
                            PlaceOfServiceCode = "12",
                            PlaceOfServiceDesc = "Home"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisplayOnSummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StatusColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            DisplayOnSummary = false,
                            StatusColor = "Green",
                            StatusName = "Approved"
                        },
                        new
                        {
                            StatusId = 2,
                            DisplayOnSummary = true,
                            StatusColor = "Red",
                            StatusName = "Working"
                        },
                        new
                        {
                            StatusId = 3,
                            DisplayOnSummary = true,
                            StatusColor = "DarkRed",
                            StatusName = "Expired"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Treatment", b =>
                {
                    b.Property<string>("TreatmentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TreatmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentCode");

                    b.ToTable("TreatmentClass");

                    b.HasData(
                        new
                        {
                            TreatmentCode = "OT",
                            TreatmentName = "Occupational Therapy"
                        },
                        new
                        {
                            TreatmentCode = "ST",
                            TreatmentName = "Speech Therapy"
                        },
                        new
                        {
                            TreatmentCode = "PT",
                            TreatmentName = "Physical Therapy"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
