// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PA_Backend.Data;

namespace PA_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a4916e18-0126-4107-afc0-1e9a05733bfb",
                            ConcurrencyStamp = "0c9bc621-d3cc-4feb-9a6b-c4af6a48f93e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "7db71b0b-ed91-49c0-9f76-44ccff40be4d",
                            ConcurrencyStamp = "5d726dd7-cdc7-4982-bbe3-c466a48cf359",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PA_Backend.Models.CPTCode", b =>
                {
                    b.Property<int>("CPTCodeId")
                        .HasColumnType("int");

                    b.Property<string>("CPTDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPTCodeId");

                    b.ToTable("CPTCodes");

                    b.HasData(
                        new
                        {
                            CPTCodeId = 92507,
                            CPTDescription = "Treatment of speech, language, voice, communication, and/or auditory processing disorder."
                        },
                        new
                        {
                            CPTCodeId = 97129,
                            CPTDescription = "Therapeutic interventions that focus on cognitive function (e.g., attention, memory, reasoning, executive function, problem-solving and/or pragmatic functioning) and compensatory strategies to manage the performance of an activity (e.g., managing time or schedules, initiating, organizing and sequencing tasks), direct (one-on-one) patient contact; initial 15 minutes"
                        },
                        new
                        {
                            CPTCodeId = 97130,
                            CPTDescription = "Each additional 15 minutes. Code 97130 is an add-on code. It will need to be billed in addition to 97129 whenever more than one 15-minute unit is performed. Code 97129 will only ever be billed once per visit. Code 91730 will never be billed alone."
                        },
                        new
                        {
                            CPTCodeId = 97110,
                            CPTDescription = "Therapeutic exercises to develop strength, endurance, range of motion and flexibility."
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Carrier", b =>
                {
                    b.Property<int>("CarrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierNotes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CarrierProviderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarrierId");

                    b.ToTable("Carriers");

                    b.HasData(
                        new
                        {
                            CarrierId = 1,
                            CarrierContactEmail = "",
                            CarrierContactName = "Jane Doe",
                            CarrierContactPhone = "(800) 555-1212",
                            CarrierName = "Forward Health",
                            CarrierNotes = "",
                            CarrierProviderPhone = "(800) 555-1212",
                            CarrierShortName = "EDS"
                        },
                        new
                        {
                            CarrierId = 2,
                            CarrierContactEmail = "",
                            CarrierContactName = "",
                            CarrierContactPhone = "",
                            CarrierName = "United Health Care",
                            CarrierNotes = "",
                            CarrierProviderPhone = "",
                            CarrierShortName = "UHC"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClinicAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ClinicIsAGroup")
                        .HasColumnType("bit");

                    b.Property<long>("ClinicNPI")
                        .HasColumnType("bigint");

                    b.Property<string>("ClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            ClinicId = 1,
                            ClinicAddress1 = "123 Any Street",
                            ClinicAddress2 = "",
                            ClinicCity = "Mt Pleasant",
                            ClinicIsAGroup = true,
                            ClinicNPI = 1144664293L,
                            ClinicName = "The Playroom, Inc",
                            ClinicPhone = "(262) 555-1212",
                            ClinicState = "WI",
                            ClinicZip = "53406"
                        },
                        new
                        {
                            ClinicId = 2,
                            ClinicAddress1 = "123 Any Street",
                            ClinicAddress2 = "",
                            ClinicCity = "Mt Pleasant",
                            ClinicIsAGroup = false,
                            ClinicNPI = 1891048211L,
                            ClinicName = "Xaris, Inc",
                            ClinicPhone = "(262) 555-1212",
                            ClinicState = "WI",
                            ClinicZip = "53406"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.DiagnosisCode", b =>
                {
                    b.Property<string>("DiagCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagCode");

                    b.ToTable("DiagnosisCodes");
                });

            modelBuilder.Entity("PA_Backend.Models.NoteType", b =>
                {
                    b.Property<int>("NoteTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NoteTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteTypeId");

                    b.ToTable("NoteTypes");

                    b.HasData(
                        new
                        {
                            NoteTypeId = 1,
                            NoteTypeName = "General"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.PACPTCode", b =>
                {
                    b.Property<int>("PARecordId")
                        .HasColumnType("int");

                    b.Property<int>("PACPTId")
                        .HasColumnType("int");

                    b.HasKey("PARecordId", "PACPTId");

                    b.HasIndex("PACPTId");

                    b.ToTable("PACPTCodes");
                });

            modelBuilder.Entity("PA_Backend.Models.PADiagCode", b =>
                {
                    b.Property<int>("PARecordId")
                        .HasColumnType("int");

                    b.Property<string>("PADiagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PARecordId", "PADiagId");

                    b.HasIndex("PADiagId");

                    b.ToTable("PADiagCodes");
                });

            modelBuilder.Entity("PA_Backend.Models.PANote", b =>
                {
                    b.Property<int>("PARecordId")
                        .HasColumnType("int");

                    b.Property<int>("PANoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PANoteText")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PANoteTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PANoteUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PARecordId", "PANoteId");

                    b.HasIndex("PANoteTypeId");

                    b.HasIndex("PANoteUserId");

                    b.ToTable("PANotes");
                });

            modelBuilder.Entity("PA_Backend.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatientClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PatientDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PatientHaveIEP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PatientInABA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PatientInactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PatientLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNotes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            PatientClass = "CO",
                            PatientDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1943),
                            PatientFirstName = "Johnny",
                            PatientHaveIEP = true,
                            PatientInABA = true,
                            PatientInactive = false,
                            PatientLastName = "Quest",
                            PatientNotes = "An adventerous boy!"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.PlaceOfService", b =>
                {
                    b.Property<string>("PlaceOfServiceCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceOfServiceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceOfServiceCode");

                    b.ToTable("PlacesOfServices");

                    b.HasData(
                        new
                        {
                            PlaceOfServiceCode = "02",
                            PlaceOfServiceDesc = "Telehealth"
                        },
                        new
                        {
                            PlaceOfServiceCode = "03",
                            PlaceOfServiceDesc = "School"
                        },
                        new
                        {
                            PlaceOfServiceCode = "11",
                            PlaceOfServiceDesc = "Office"
                        },
                        new
                        {
                            PlaceOfServiceCode = "12",
                            PlaceOfServiceDesc = "Home"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.PriorAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PAArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PAAssignedStaff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PACarrierId")
                        .HasColumnType("int");

                    b.Property<int?>("PAClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PAExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PALastEvalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PALastPOCDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PAPatientId")
                        .HasColumnType("int");

                    b.Property<int>("PAProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PARequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PARqstNmbrVisits")
                        .HasColumnType("int");

                    b.Property<string>("PAServiceCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PAStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PAStatus")
                        .HasColumnType("int");

                    b.Property<string>("PATreatmentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PAVisitFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffMemberId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PACarrierId");

                    b.HasIndex("PAClinicId");

                    b.HasIndex("PAPatientId");

                    b.HasIndex("PAProviderId");

                    b.HasIndex("PAServiceCode");

                    b.HasIndex("PAStatus");

                    b.HasIndex("PATreatmentCode");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("PriorAuths");
                });

            modelBuilder.Entity("PA_Backend.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedStaffUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderNPI")
                        .HasColumnType("bigint");

                    b.Property<string>("ProviderNotes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("ProviderRcvEmails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ProviderTaxonomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.HasIndex("AssignedStaffUserId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            ProviderId = 1,
                            ProviderEmail = "julie@prtherapy123.com",
                            ProviderFirstName = "Julie",
                            ProviderLastName = "Fitzgerald",
                            ProviderNPI = 1234567890L,
                            ProviderNotes = "",
                            ProviderRcvEmails = true,
                            ProviderTaxonomy = ""
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisplayOnSummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StatusColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusTextColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#ffffff");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            DisplayOnSummary = false,
                            StatusColor = "Green",
                            StatusName = "Approved"
                        },
                        new
                        {
                            StatusId = 2,
                            DisplayOnSummary = true,
                            StatusColor = "Red",
                            StatusName = "Working"
                        },
                        new
                        {
                            StatusId = 3,
                            DisplayOnSummary = true,
                            StatusColor = "DarkRed",
                            StatusName = "Expired"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.Treatment", b =>
                {
                    b.Property<string>("TreatmentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TreatmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentCode");

                    b.ToTable("TreatmentClass");

                    b.HasData(
                        new
                        {
                            TreatmentCode = "OT",
                            TreatmentName = "Occupational Therapy"
                        },
                        new
                        {
                            TreatmentCode = "ST",
                            TreatmentName = "Speech Therapy"
                        },
                        new
                        {
                            TreatmentCode = "PT",
                            TreatmentName = "Physical Therapy"
                        });
                });

            modelBuilder.Entity("PA_Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PA_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PA_Backend.Models.PACPTCode", b =>
                {
                    b.HasOne("PA_Backend.Models.CPTCode", "CPTCode")
                        .WithMany()
                        .HasForeignKey("PACPTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.PriorAuth", "PriorAuth")
                        .WithMany()
                        .HasForeignKey("PARecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPTCode");

                    b.Navigation("PriorAuth");
                });

            modelBuilder.Entity("PA_Backend.Models.PADiagCode", b =>
                {
                    b.HasOne("PA_Backend.Models.DiagnosisCode", "DiagnosisCode")
                        .WithMany()
                        .HasForeignKey("PADiagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.PriorAuth", "PriorAuth")
                        .WithMany()
                        .HasForeignKey("PARecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisCode");

                    b.Navigation("PriorAuth");
                });

            modelBuilder.Entity("PA_Backend.Models.PANote", b =>
                {
                    b.HasOne("PA_Backend.Models.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("PANoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("PANoteUserId");

                    b.HasOne("PA_Backend.Models.PriorAuth", "PriorAuth")
                        .WithMany()
                        .HasForeignKey("PARecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteType");

                    b.Navigation("PriorAuth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PA_Backend.Models.PriorAuth", b =>
                {
                    b.HasOne("PA_Backend.Models.Carrier", "Carrier")
                        .WithMany()
                        .HasForeignKey("PACarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("PAClinicId");

                    b.HasOne("PA_Backend.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PAPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("PAProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.PlaceOfService", "PlaceOfService")
                        .WithMany()
                        .HasForeignKey("PAServiceCode");

                    b.HasOne("PA_Backend.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("PAStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PA_Backend.Models.Treatment", "Treatment")
                        .WithMany()
                        .HasForeignKey("PATreatmentCode");

                    b.HasOne("PA_Backend.Models.User", "StaffMember")
                        .WithMany()
                        .HasForeignKey("StaffMemberId");

                    b.Navigation("Carrier");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");

                    b.Navigation("PlaceOfService");

                    b.Navigation("Provider");

                    b.Navigation("StaffMember");

                    b.Navigation("Status");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("PA_Backend.Models.Provider", b =>
                {
                    b.HasOne("PA_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedStaffUserId");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
